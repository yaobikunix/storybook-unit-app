name: CI # GitHub Actions の UI に表示されるワークフロー名

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-format-check:
    name: Lint & Format Check # コードスタイルや型のチェックを行うジョブ
    runs-on: ubuntu-latest # 最新の Ubuntu 環境で実行
    permissions:
      contents: read # リポジトリの内容を読み取る権限
      pull-requests: write # PRにコメントを書き込む権限（Lint結果を表示するためのもの）

    steps:
      - name: Checkout repository # リポジトリのコードを取得
        uses: actions/checkout@v4

      - name: Set up Node.js # Node.js 20をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 使用するNode.jsのバージョン（20系）
          cache: 'npm' # `npm ci`の実行時にキャッシュを利用して高速化
          cache-dependency-path: package-lock.json

      - name: Cache dependencies # 依存関係のキャッシュ設定
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm のキャッシュ保存先
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies # 依存パッケージをインストール
        run: npm ci # `npm ci` で package-lock.json に基づいてインストール（再現性が高い）

      - name: Run ESLint # コードの静的解析を実行
        run: npm run lint # `eslint .` を実行（エラーがあると GitHub Actions で検出）

      - name: Run TypeScript Check # TypeScript の型チェックを実行
        run: npm run type-check # `tsc --noEmit` で型エラーをチェック（型ミスを防ぐ）

      - name: Run Prettier Check # Prettier でコードフォーマットのチェックを実行
        run: npm run format # `prettier --check .` を実行（フォーマットミスがあると検出）

  build-check:
    name: Build Check # プロジェクトのビルドを確認するジョブ
    runs-on: ubuntu-latest # 最新の Ubuntu 環境で実行

    steps:
      - name: Checkout repository # リポジトリのコードを取得
        uses: actions/checkout@v4

      - name: Set up Node.js # Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20 # 使用する Node.js のバージョン
          cache: 'npm' # npm のキャッシュを利用

      - name: Cache dependencies # 依存関係のキャッシュ設定
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm のキャッシュ保存先
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies # 依存パッケージをインストール
        run: npm ci # `npm ci` で package-lock.json に基づいてインストール

      - name: Build project # プロジェクトのビルドを実行
        run: npm run build # `next build` を実行（ビルドエラーがないか確認）
